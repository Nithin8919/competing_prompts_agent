import React, { useState } from 'react'
import { Download, Loader2 } from 'lucide-react'
import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

const PDFExport = ({ image, results, canvasRef }) => {
  const [isExporting, setIsExporting] = useState(false)

  const exportToPDF = async () => {
    if (!image || !results) return

    setIsExporting(true)

    try {
      // Create a new jsPDF instance
      const pdf = new jsPDF('p', 'mm', 'a4')
      const pageWidth = pdf.internal.pageSize.getWidth()
      const pageHeight = pdf.internal.pageSize.getHeight()

      // Add title
      pdf.setFontSize(20)
      pdf.setTextColor(51, 65, 85) // navy-700
      pdf.text('CTA Focus Analysis Report', 20, 20)

      // Add metadata
      pdf.setFontSize(10)
      pdf.setTextColor(100, 116, 139) // navy-500
      const date = new Date().toLocaleDateString()
      pdf.text(`Generated on: ${date}`, 20, 30)
      pdf.text(`Image: ${image.name}`, 20, 35)
      pdf.text(`Dimensions: ${results.meta.image_dims}`, 20, 40)
      pdf.text(`Processing Time: ${results.meta.processing_time}`, 20, 45)

      // Add image with overlays
      if (canvasRef.current) {
        const canvas = canvasRef.current
        const imgData = canvas.toDataURL('image/png')
        
        // Calculate image dimensions to fit the page
        const imgAspectRatio = canvas.width / canvas.height
        let imgWidth = pageWidth - 40 // 20mm margin on each side
        let imgHeight = imgWidth / imgAspectRatio
        
        // If image is too tall, adjust dimensions
        if (imgHeight > pageHeight * 0.4) {
          imgHeight = pageHeight * 0.4
          imgWidth = imgHeight * imgAspectRatio
        }
        
        pdf.addImage(imgData, 'PNG', 20, 55, imgWidth, imgHeight)
        
        // Move cursor below image
        let currentY = 55 + imgHeight + 15
        
        // Add summary section
        pdf.setFontSize(14)
        pdf.setTextColor(51, 65, 85)
        pdf.text('Analysis Summary', 20, currentY)
        currentY += 10
        
        pdf.setFontSize(10)
        pdf.setTextColor(71, 85, 105)
        
        const ctaCount = results.ctas.length
        const highScoreCTAs = results.ctas.filter(c => c.score >= 70).length
        const mediumScoreCTAs = results.ctas.filter(c => c.score >= 40 && c.score < 70).length
        const lowScoreCTAs = results.ctas.filter(c => c.score < 40).length
        
        pdf.text(`• Total CTAs detected: ${ctaCount}`, 25, currentY)
        currentY += 5
        pdf.text(`• High attention CTAs (70%+): ${highScoreCTAs}`, 25, currentY)
        currentY += 5
        pdf.text(`• Medium attention CTAs (40-69%): ${mediumScoreCTAs}`, 25, currentY)
        currentY += 5
        pdf.text(`• Low attention CTAs (<40%): ${lowScoreCTAs}`, 25, currentY)
        currentY += 15
        
        // Add detailed CTA list
        if (results.ctas.length > 0) {
          pdf.setFontSize(14)
          pdf.setTextColor(51, 65, 85)
          pdf.text('Detailed CTA Analysis', 20, currentY)
          currentY += 10
          
          results.ctas.forEach((cta, index) => {
            // Check if we need a new page
            if (currentY > pageHeight - 30) {
              pdf.addPage()
              currentY = 20
            }
            
            pdf.setFontSize(11)
            pdf.setTextColor(51, 65, 85)
            pdf.text(`${index + 1}. ${cta.label}`, 25, currentY)
            currentY += 5
            
            pdf.setFontSize(9)
            pdf.setTextColor(71, 85, 105)
            pdf.text(`   Attention Score: ${cta.score}% | Confidence: ${cta.confidence}% | Area: ${cta.area_percentage}%`, 25, currentY)
            currentY += 5
            
            // Add recommendation
            let recommendation = ""
            if (cta.score >= 70) {
              recommendation = "✓ Excellent positioning with strong attention potential"
            } else if (cta.score >= 40) {
              recommendation = "⚠ Good positioning, consider optimizing for better visibility"
            } else {
              recommendation = "⚠ Low attention score, consider repositioning or resizing"
            }
            
            pdf.text(`   Recommendation: ${recommendation}`, 25, currentY)
            currentY += 10
          })
        }
        
        // Add footer
        pdf.setFontSize(8)
        pdf.setTextColor(148, 163, 184)
        pdf.text('Generated by CTA Focus Analyzer • Built with React, Flask, and HuggingFace DETR', 20, pageHeight - 10)
      }

      // Save the PDF
      const fileName = `cta-analysis-${image.name.split('.')[0]}-${Date.now()}.pdf`
      pdf.save(fileName)

    } catch (error) {
      console.error('Export failed:', error)
      alert('Failed to export PDF. Please try again.')
    } finally {
      setIsExporting(false)
    }
  }

  return (
    <button
      onClick={exportToPDF}
      disabled={isExporting || !results}
      className="btn-primary flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      {isExporting ? (
        <Loader2 className="h-4 w-4 animate-spin" />
      ) : (
        <Download className="h-4 w-4" />
      )}
      <span>{isExporting ? 'Exporting...' : 'Export PDF'}</span>
    </button>
  )
}

export default PDFExport
